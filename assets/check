#!/bin/sh
# vim: set ft=sh

set -e -x

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.bash

curl_opts="--fail" # make curl return non-zero exit code if request fails

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)
cat > $payload <&0

repository="$(jq -r '.source.repository // ""' < $payload)"
tag="$(jq -r '.source.tag // "latest"' < $payload)"
image="$(jq -r '.version.image // ""' < $payload)"

if [ -z "$repository" ]; then
  echo "must specify repository"
  exit 1
fi

username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)

if [ -n "${username}" ] && [ -n "${password}" ]; then
  curl_opts="${curl_opts} -u ${username}:${password}"
fi

if private_registry "${repository}" ; then
  registry="$(extract_registry "${repository}")"
  repository="$(extract_repository "${repository}")"
else
  registry=registry.hub.docker.com
fi

protocol="$(find_protocol "${registry}")"
uri_root="${protocol}://${registry}"

tags=$(mktemp /tmp/resource-in-tags.XXXXXX)
curl ${curl_opts} "${uri_root}/v1/repositories/${repository}/tags" > $tags

shortened_image=$(jq -r "map(select(.name == $(echo $tag | jq -R .)))[].layer" < $tags)

all_images=$(mktemp /tmp/resource-in-tags.XXXXXX)
curl ${curl_opts} "${uri_root}/v1/repositories/${repository}/images" > $all_images

latest_image=$(jq -r "map(select(.id | startswith($(echo $shortened_image | jq -R .))))[0].id // \"\"" < $all_images)

if [ -z "$latest_image"] && ! [ -z "$shortened_image" ]; then
  echo "failed to expand image id. :("
  exit 1
fi

if [ -z "$latest_image" ] || [ "$latest_image" = "$image" ]; then
  echo "[]" >&3
else
  jq -n "[{ image: $(echo $latest_image | jq -R .) }]" >&3
fi

rm $payload $tags $all_images
