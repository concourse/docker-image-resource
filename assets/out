#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.bash

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > $payload <&0

cd $source

server_args=$(jq -r '.source.server_args // ""' < $payload)

start_docker "$server_args"

username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)
email=$(jq -r '.source.email // ""' < $payload)
repository=$(jq -r '.source.repository // ""' < $payload)

if private_registry "${repository}" ; then
  registry="$(extract_registry "${repository}")"
else
  registry=
fi

if [ -n "${username}" ] && [ -n "${password}" ] && [ -n "${email}" ]; then
  docker_login "${username}" "${password}" "${email}" "${registry}"
fi

tag_source=$(jq -r '.source.tag // ""' < $payload)
tag_params=$(jq -r '.params.tag // ""' < $payload)

tag_prefix=$(jq -r '.params.tag_prefix // ""' < $payload)

tag_name=""
if [ -n "$tag_params" ]; then
  if [ ! -f "$tag_params" ]; then
    echo "tag file '$tag_params' does not exist"
    exit 1
  fi
  tag_name="${tag_prefix}$(cat $tag_params)"
elif [ -n "$tag_source" ]; then
  tag_name="$tag_source"
else
  tag_name="latest"
fi

if [ -z "$repository" ]; then
  echo "must specify repository"
  exit 1
fi

build=$(jq -r '.params.build // ""' < $payload)
cache=$(jq -r '.params.cache' < $payload)

load=$(jq -r '.params.load // ""' < $payload)

load_file=$(jq -r '.params.load_file // ""' < $payload)
load_repository=$(jq -r '.params.load_repository // ""' < $payload)
load_tag=$(jq -r '.params.load_tag // "latest"' < $payload)

import_file=$(jq -r '.params.import_file // ""' < $payload)

pull_repository=$(jq -r '.params.pull_repository // ""' < $payload)
pull_tag=$(jq -r '.params.pull_tag // "latest"' < $payload)

push="$(jq -r '.params.push' < $payload)"
rootfs="$(jq -r '.params.rootfs' < $payload)"

if [ -n "$build" ]; then
  if [ "$cache" = "true" ]; then
    docker_pull "${repository}:${tag_name}";
  fi

  docker build -t "${repository}:${tag_name}" "$build"
elif [ -n "$load" ]; then
  docker load -i "${load}/image"
  docker tag "$(cat ${load}/image-id)" "${repository}:${tag_name}"
elif [ -n "$load_file" ]; then
  docker load -i $load_file
  docker tag "${load_repository}:${load_tag}" "${repository}:${tag_name}"
elif [ -n "$import_file" ]; then
  cat $import_file | docker import - "${repository}:${tag_name}"
elif [ -n "$pull_repository" ]; then
  docker pull "${pull_repository}:${pull_tag}"
  docker tag "${pull_repository}:${pull_tag}" "${repository}:${tag_name}"
else
  echo "must specify build or image param"
  exit 1
fi

image=$(docker_image "$repository" "${tag_name}")

if [ "$rootfs" = "true" ]; then
  docker run --cidfile=container.cid "$image" echo container created
  docker export $(cat container.cid) > ${destination}/rootfs.tar
fi

if [ "$push" = "null" ] || [ "$push" = "true" ]; then
  docker push "${repository}:${tag_name}"
fi

jq -n "{
  version: {
    image: $(echo $image | jq -R .)
  },
  metadata: [
    { name: \"image\", value: $(echo $image | head -c 12 | jq -R .) }
  ]
}" >&3
