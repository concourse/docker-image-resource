#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.bash

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > $payload <&0

server_args=$(jq -r '.source.server_args // ""' < $payload)

start_docker "$server_args"

username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)
email=$(jq -r '.source.email // ""' < $payload)
repository="$(jq -r '.source.repository // ""' < $payload)"

if private_registry "${repository}" ; then
  registry="$(extract_registry "${repository}")"
else
  registry=
fi

tag="$(jq -r '.source.tag // "latest"' < $payload)"
rootfs="$(jq -r '.params.rootfs // false' < $payload)"
skip_download="$(jq -r '.params.skip_download // false' < $payload)"

mkdir -p $destination

if [ "$skip_download" = "false" ]; then
  if [ -n "${username}" ] && [ -n "${password}" ] && [ -n "${email}" ]; then
    docker_login "${username}" "${password}" "${email}" ${registry}
  fi

  docker_pull "${repository}:${tag}"

  image=$(docker_image "$repository" "$tag")
  if [ -z "$image" ]; then
    echo "failed to determine image id :("
    exit 1
  fi

  docker save -o ${destination}/image "${repository}:${tag}"

  if [ "$rootfs" = "true" ]; then
    docker run --cidfile=container.cid "$image" echo container created
    docker export $(cat container.cid) > ${destination}/rootfs.tar
  fi
else
  if [ -z "${registry}" ]; then
    registry_api="registry.hub.docker.com"
    repository_name="${repository}"
    json_selector=".[0].id"
  else
    registry_api="${registry}"
    repository_name=$(extract_repository $repository)
    json_selector="."
  fi

  echo "downloading ${repository_name}:${tag} metadata from ${registry_api}..."
  protocol="$(find_protocol "$registry_api")"
  image=$(curl -s -X GET ${protocol}://${registry_api}/v1/repositories/${repository_name}/tags/${tag} | jq "$json_selector" | tr -d '"')
  echo "done"
fi

echo "$repository" > ${destination}/repository
echo "$tag" > ${destination}/tag
echo "$image" > ${destination}/image-id

jq -n "{
  version: {
    image: $(echo $image | jq -R .)
  },
  metadata: [
    { name: \"image\", value: $(echo $image | head -c 12 | jq -R .) }
  ]
}" >&3
